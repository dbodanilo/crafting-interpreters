// unambiguous
program         -> declaration* EOF ;
declaration     -> varDecl
                 | statement ;
varDecl         -> "var" IDENTIFIER ( "=" expression )? ";" ;
statement       -> exprStmt
                 | forStmt
                 | ifStmt
                 | printStmt
                 | whileStmt
                 | block ;
exprStmt        -> expression ";" ;
forStmt         -> "for" "(" (varDecl | exprStmt | ";" )
                             expression? ";"
                             expression? ")" statement ;s
ifStmt          -> "if" "(" expression ")" statement ( "else" statement )? ;
printStmt       -> "print" expression ";" ;
whileStmt       -> "while" "(" expression ")" statement ;
block           -> "{" declaration* "}" ;

// expression      -> equality ; (before the addition of the comma operator)
// expression      -> sequence ; (before the addition of the ternary operator)
// expression      -> ternary ;  (before the addition of the asignment expression)

expression      -> sequence ;
sequence        -> assignment ( "," assignment )* ;

assignment      -> IDENTIFIER "=" assignment
                 | ternary ;

ternary         -> logic_or ( "?" ternary ":" ternary )*

logic_or        -> logic_and ( "or" logic_and )* ;
logic_and       -> equality ( "and" equality )* ;
equality        -> comparison ( ( "!=" | "==" ) comparison )* ;
comparison      -> addition ( ( ">" | ">=" | "<" | "<=" ) addition )* ;
addition        -> multiplication ( ( "-" | "+" ) multiplication )* ;

// correct, but not optimal for how it will be parsed
// multiplication  -> multiplication ( "/" | "*" ) unary
//                  | unary ;

multiplication  -> unary ( ( "/" | "*" ) unary )* ;
unary           -> ( "!" | "-" ) unary
                 | primary ;
primary         -> "true" | "false" | "nil"
                 | NUMBER | STRING
                 | "(" expression ")"
                 | IDENTIFIER ;

// ambiguous
expression -> literal
            | unary
            | binary
            | grouping ;
literal  -> NUMBER | STRING | "true" | "false" | "nil" ;
grouping -> "(" expression ")" ;
unary    -> ( "-" | "!" ) expression ;
binary   -> expression operator expression ;
operator -> "==" | "!=" | "<" | "<=" | ">" | ">="
          | "+"  | "-"  | "*" | "/"  ;
